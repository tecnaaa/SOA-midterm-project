name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
    
    - name: Install backend dependencies
      run: |
        cd services/user-service
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
    
    - name: Run backend tests
      run: |
        cd services/user-service
        pytest --cov=. --cov-report=xml
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./services/user-service/coverage.xml,./frontend/coverage/coverage-final.json

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker-compose -f docker-compose.yml build
        docker tag tuition-payment-frontend:latest $ECR_REGISTRY/tuition-payment-frontend:$IMAGE_TAG
        docker tag tuition-payment-backend:latest $ECR_REGISTRY/tuition-payment-backend:$IMAGE_TAG
        docker push $ECR_REGISTRY/tuition-payment-frontend:$IMAGE_TAG
        docker push $ECR_REGISTRY/tuition-payment-backend:$IMAGE_TAG
    
    - name: Deploy to production
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.PRODUCTION_HOST }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        scp -i private_key -o StrictHostKeyChecking=no docker-compose.yml root@$HOST:/root/
        ssh -i private_key -o StrictHostKeyChecking=no root@$HOST "cd /root && docker-compose pull && docker-compose up -d"